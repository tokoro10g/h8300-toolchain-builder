--- gcc-4.4.6/gcc/config/h8300/t-h8300	2004-07-08 12:40:34.000000000 +0900
+++ gcc-4.4.6-cross/gcc/config/h8300/t-h8300	2013-11-15 06:20:11.000000000 +0900
@@ -27,8 +27,8 @@
 	echo '#endif' >> fp-bit.c
 	cat $(srcdir)/config/fp-bit.c >> fp-bit.c
 
-MULTILIB_OPTIONS = mh/ms/msx mn mint32
-MULTILIB_DIRNAMES = h8300h h8300s h8sx normal int32
+MULTILIB_OPTIONS = mh mn mint32
+MULTILIB_DIRNAMES = h8300h normal int32
 MULTILIB_EXCEPTIONS = mint32 mn mn/mint32
 
 LIBGCC = stmp-multilib

--- gcc-4.4.6/gcc/toplev.c
+++ gcc-4.4.6-cross/gcc/toplev.c
@@ -537,7 +537,7 @@ read_integral_parameter (const char *p, const char *pname, const int  defval)
    for floor_log2 and exact_log2; see toplev.h.  That construct, however,
    conflicts with the ISO C++ One Definition Rule.   */

-#if GCC_VERSION < 3004 || !defined (__cplusplus)
+#if GCC_VERSION < 3004

 /* Given X, an unsigned number, return the largest int Y such that 2**Y <= X.
    If X is 0, return -1.  */
@@ -589,7 +589,7 @@ exact_log2 (unsigned HOST_WIDE_INT x)
 #endif
 }

-#endif /*  GCC_VERSION < 3004 || !defined (__cplusplus)  */
+#endif /*  GCC_VERSION < 3004 */

 /* Handler for fatal signals, such as SIGSEGV.  These are transformed
    into ICE messages, which is much more user friendly.  In case the

--- gcc-4.4.6/gcc/toplev.h
+++ gcc-4.4.6-patched/gcc/toplev.h
@@ -151,6 +151,7 @@ extern void decode_d_option     (const char *);
 /* Return true iff flags are set as if -ffast-math.  */
 extern bool fast_math_flags_set_p  (void);

+#if GCC_VERSION < 3004
 /* Return log2, or -1 if not exact.  */
 extern int exact_log2                  (unsigned HOST_WIDE_INT);

@@ -158,7 +159,7 @@ extern int exact_log2                  (unsigned HOST_WIDE_INT);
 extern int floor_log2                  (unsigned HOST_WIDE_INT);

 /* Inline versions of the above for speed.  */
-#if GCC_VERSION >= 3004
+#else /* GCC_VERSION >= 3004 */
 # if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG
 #  define CLZ_HWI __builtin_clzl
 #  define CTZ_HWI __builtin_ctzl
@@ -170,13 +171,13 @@ extern int floor_log2                  (unsigned HOST_WIDE_INT);
 #  define CTZ_HWI __builtin_ctz
 # endif

-extern inline int
+static inline int
 floor_log2 (unsigned HOST_WIDE_INT x)
 {
   return x ? HOST_BITS_PER_WIDE_INT - 1 - (int) CLZ_HWI (x) : -1;
 }

-extern inline int
+static inline int
 exact_log2 (unsigned HOST_WIDE_INT x)
 {
   return x == (x & -x) && x ? (int) CTZ_HWI (x) : -1;
